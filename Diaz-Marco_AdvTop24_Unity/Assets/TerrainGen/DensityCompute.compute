#pragma kernel Density
#include "Includes/noiseSimplex.cginc"

RWStructuredBuffer<float> densities;
float3 local_position;
uint3 lattice_size;
int octaves;
float scale;
float lacunarity;
float persistence;
float squashing_factor;
float mid_height;

int indexFromCoord(uint x, uint y, uint z, uint3 grid_size)
{
    return z * grid_size.x * grid_size.y +
           y * grid_size.x +
           x;
}

float FractalNoise3D(float3 position, float octaves, float scale, float lacunarity, float persistence)
{
    //position += float3(123.456, 789.123, 456.789);
    
    float noise_sum = 0;

    for (int i = 0; i < octaves; i++)
    {
        float frequency = pow(abs(lacunarity), i) * 1 / scale;
        float amplitude = pow(abs(persistence), i);
        
        float noise = snoise((position) * frequency) * amplitude;
        noise_sum += noise;
    }
    return noise_sum;
}

float VolumetricNoise(float3 position, float octaves, float scale, float lacunarity, float persistence, float squashing_factor, float mid_height)
{
    float radius = length(position);
    
    float squash = -radius * squashing_factor + mid_height * squashing_factor;
    
    return FractalNoise3D(position, octaves, scale, lacunarity, persistence) + squash;
}

float SphericalSurfaceNoise(float3 position, float octaves, float scale, float lacunarity, float persistence, float squashing_factor, float mid_height)
{ 
    float radius = length(position);
    
    float3 sphere_position = position / radius;
    
    float noise = FractalNoise3D(sphere_position, octaves, scale, lacunarity, persistence);
    
    float t = (noise + 1) / 2.0;
    float surface_height = lerp(18, 30, t);
    
    float density = (radius - surface_height) / (18 - 30) * 2;
    
    return density;
}

[numthreads(8, 8, 8)]
void Density (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= lattice_size.x || id.y >= lattice_size.y || id.z >= lattice_size.z)
    {
        return;
    }
    
    float3 position = id + local_position;
    
    float density = SphericalSurfaceNoise(position, octaves, scale, lacunarity, persistence, squashing_factor, mid_height);
    
    int index = indexFromCoord(id.x, id.y, id.z, lattice_size);
    densities[index] = density;
}

//float SphereSurfaceNoise(Vector3 position, float min_height, float max_height, float noise_scale, int octaves) // noise for flat hilly terrain on the surface of a sphere
//{
//    float noise = Noise3D((position).normalized + seed_position / 10f, noise_scale, octaves);
//    float t = (noise + 1) / 2f;
//    float surface_height = Mathf.Lerp(min_height, max_height, height_map.Evaluate(t));
//
//    float radius = (position).magnitude;
//
//    float density = (radius - surface_height) / (max_height - min_height) * 2;
//
//    return density;
//
//}

