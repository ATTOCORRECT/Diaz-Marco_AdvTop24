#pragma kernel GenerateMesh
#include "Includes\MarchingCubesTables.compute"


struct Triangle
{
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;

float densities[];

uint3 grid_size;

int indexFromCoord(uint x, uint y, uint z, uint3 grid_size)
{
    return z * grid_size.x * grid_size.y + 
           y * grid_size.x + 
           x;
}

int3 coordFromIndex(uint index, uint3 grid_size)
{
    int x = index % grid_size.x;
    int y = (index / grid_size.x) % grid_size.y;
    int z = (index / (grid_size.x * grid_size.y)) % grid_size.z;
    return int3(x, y, z);
}

float3 calculateVertexPosition(float3 cell_position, int edge_index)
{
    int corner_index_A = EDGE_TABLE[edge_index][0];
    int corner_index_B = EDGE_TABLE[edge_index][1];
        
    int3 corner_offset_A = CORNER_OFFSETS[corner_index_A];
    int3 corner_offset_B = CORNER_OFFSETS[corner_index_B];
        
    int3 vertex_position_A = cell_position + corner_offset_A;
    int3 vertex_position_B = cell_position + corner_offset_B;
        
    int density_index_A = indexFromCoord(vertex_position_A.x, vertex_position_A.y, vertex_position_A.z, grid_size + uint3(1));
    float vertex_density_A = densities[density_index_A];
        
    int density_index_B = indexFromCoord(vertex_position_B.x, vertex_position_B.y, vertex_position_B.z, grid_size + uint3(1));
    float vertex_density_B = densities[density_index_B];
        
    float bias = 0.5; //float bias = (0 - (float) vertex_data_A[1]) / ((float) vertex_data_B[1] - (float) vertex_data_A[1]);
        
    float3 vertex_position = lerp(vertex_position_A, vertex_position_B, bias);
    return vertex_position;
}

[numthreads(8,8,8)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= grid_size.x || id.y >= grid_size.y || id.z >= grid_size.z)
    {
        return;
    }
    
    uint3 cell_position = id;
    
    // get triangulation index for this cell
    
    int triangulation_index = 0;
    for (int i = 0; i < 8; i++)
    {
        int3 corner_offset = CORNER_OFFSETS[i];
        int3 lattice_corner_position = corner_offset + id;
        int density_index = indexFromCoord(lattice_corner_position.x, lattice_corner_position.y, lattice_corner_position.z, grid_size + uint3(1));
        float cell_vertex_density = densities[density_index];
        
        if (cell_vertex_density > 0)
        {
            triangulation_index |= 1 << i;
        }
    }
    
    // generate triangulation for this cell
    
    int triangulation[] = TRIANGULATION_TABLE[triangulation_index];
    
    for (int i = 0; triangulation[i] != -1; i+= 3)
    {
        int edge_index = triangulation[i];

        float3 vertex_A = calculateVertexPosition(cell_position, triangulation[i    ]);
        float3 vertex_B = calculateVertexPosition(cell_position, triangulation[i + 1]);
        float3 vertex_C = calculateVertexPosition(cell_position, triangulation[i + 2]);

        // append triangle
    }
    
/*       
            // generate triangulation for this cell
    List < Vector3 > triangle_vertices = new
    List < Vector3 > ();
    int[]
    triangulation = TRIANGULATION_TABLE[triangulation_index];
    for (int j = 0; j < triangulation.Length - 1; j++)
    {
        int edge_index = triangulation[j];

        int vertex_index_A = EDGE_TABLE[edge_index][0];
        int vertex_index_B = EDGE_TABLE[edge_index][1];

        ArrayList vertex_data_A = cells[i][vertex_index_A];
        ArrayList vertex_data_B = cells[i][vertex_index_B];

        float bias = (0 - (float) vertex_data_A[1]) / ((float) vertex_data_B[1] - (float) vertex_data_A[1]);

        triangle_vertices.Add(Vector3.Lerp((Vector3Int) cells[i][vertex_index_A][0], (Vector3Int) cells[i][vertex_index_B][0], bias));
    }

    AppendTriangles(triangle_vertices, vertices, normals, triangles);
 */   

}
